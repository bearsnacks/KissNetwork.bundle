#!/usr/bin/env python

"""
KissNetwork shared code.
Shared common code.
"""

# import section(s) not included in Plex Plug-In Framwork
import os
import datetime
import domain as Domain

# path constants
BUNDLE_PATH = Domain.BUNDLE_PATH
RESOURCES_PATH = os.path.join(BUNDLE_PATH, 'Contents', 'Resources')
SUPPORT_PATH = Domain.SUPPORT_PATH

# general constants
PREFIX = '/video/kissnetwork'
TITLE = 'KissNetwork'
TIMEOUT = Datetime.Delta(hours=1)
USER_AGENT = Domain.USER_AGENT
LIST_VIEW_CLIENTS = ['Android', 'iOS']
ERROR_LIST = [
    "This feature is under maintenance.", "closed to fix some serious issues",
    "We will come back soon.", "The site is overload. Please come back later.",
    ]

# regex compile
RE_BASE_URL = Regex(r'(https?://(?:www\.)?[^/]+\.\w+)')
RE_TYPE_TITLE = Regex(r'^https?://(?:www\.)?(?:kiss|kim|read)(comic|\w+)(?:online)?\.\w+')


####################################################################################################
def ParseVersion(version):
    try:
        return tuple(map(int, (version.split('.'))))
    except:
        return version

####################################################################################################
def datetime_to_utc(dt):
    n = datetime.datetime.now().replace(microsecond=0)
    nutc = datetime.datetime.utcnow().replace(microsecond=0)
    if n < nutc:
        return dt + (nutc - n)
    elif n == nutc:
        return dt
    return dt - (n - nutc)

####################################################################################################
def item_last_modified(path, utc=False):
    if os.path.exists(path):
        ts = os.path.getmtime(path)
        if utc:
            return datetime_to_utc(datetime.datetime.fromtimestamp(ts)).replace(microsecond=0)
        return datetime.datetime.fromtimestamp(ts).replace(microsecond=0)
    return False

####################################################################################################
def TypeTitleList():
    return ['Anime', 'Drama', 'Cartoon', 'Manga', 'Comic']

####################################################################################################
def BaseURL(kind):
    return [u for t, u in BaseURLListTuple() if t == kind][0]

####################################################################################################
def SearchURL(kind):
    return BaseURL(kind) + '/Search/{}'.format(kind) + '?keyword={}'

####################################################################################################
def SearchURLList():
    search_url_list = []
    for t in TypeTitleList():
        search_url_list.append(SearchURL(t))
    return search_url_list

####################################################################################################
def BaseURLList():
    base_url_list = []
    for u in URLList():
        base_url_list.append(u)
    return base_url_list

####################################################################################################
def URLList():
    url_list = []
    for t in TypeTitleList():
        url_list.append(DomainDict(t))
    return url_list

####################################################################################################
def BaseURLListTuple():
    base_url_list_t = []
    for u in URLList():
        base_url_list_t.append((GetTypeTitle(u), u))
    return base_url_list_t

####################################################################################################
def DomainDict(kind):
    d = Domain.LoadDomainDict()
    if len(d.keys()) != 5 or 'Asian' in d.keys():
        Domain.CreateDomainDict()
        d = Domain.LoadDomainDict()
    return d[kind]

####################################################################################################
def CorrectURL(url):
    return GetBaseURL(url) + '/' + url.split('/', 3)[3] if (len(url.split('/')) > 3) else GetBaseURL(url)

####################################################################################################
def GetTypeTitle(url):
    """ Get type title from URL """

    r = RE_TYPE_TITLE.search(url)
    type_title = r.group(1).title() if r else None

    return 'Drama' if type_title == 'Asian' else type_title

####################################################################################################
def GetBaseURL(url):
    """ Get base url for headers """

    type_title = GetTypeTitle(url)
    base_url = RE_BASE_URL.search(url).group(1)
    if not (type_title, base_url) in BaseURLListTuple():
        for node in BaseURLListTuple():
            if node[0] == type_title:
                base_url = node[1]
                break

        Log.Warn('* Old {} URL parsed from page! URL Domain changed to {}'.format(type_title, base_url))
        Log.Warn('* {}'.format(url))

    return base_url

####################################################################################################
def is_kiss_url(url):
    return bool(RE_TYPE_TITLE.search(url))

####################################################################################################
def CorrectCoverImage(string):
    """Correct Cover Image file name"""

    if string:
        if is_kiss_url(string):
            string = GetBaseURL(string) + '/' + string.split('/', 3)[3]
        elif 'cdn.myanimelist.net' in string:
            string = 'http://' + string.split('/', 2)[2]

        name, ext = String.SplitExtension(string)
        ext_l = ext.lower()

        if (ext_l == '.jpg') or (ext_l == '.jpeg') or (ext_l == '.png') or (ext_l == '.gif'):
            string = name + ext_l
        else:
            if ext_l == '.jp' or ext_l == '.pn':
                string = name + ext_l + 'g'
            elif ext_l == '.j':
                string = name + ext_l + 'pg'
            elif ext_l == '.p':
                string = name + ext_l + 'ng'
            elif ext_l == '.gi':
                string = name + ext_l + 'f'
            elif ext_l == '.g':
                string = name + ext_l + 'if'
            else:
                Log.Error('Content_url not valid picture | {}'.format(string))
                string = None
    else:
        pass

    return string

####################################################################################################
def StringCode(string, code):
    """Handle String Coding"""

    if string:
        if code == 'encode':
            string_code = String.Quote(string.encode('utf-8'))
        elif code == 'decode':
            # Â artifact in Windows OS, don't know why, think it has to do with the Dict protocall
            string_code = String.Unquote(string).decode('utf-8').replace('Â', '')
    else:
        string_code = None

    return string_code
